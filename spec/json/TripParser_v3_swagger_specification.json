{
  "openapi": "3.0.0",
  "info": {
    "title": "Trip Parser",
    "version": "3.0",
    "description": "\nBefore using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token."
  },
  "x-release-note": {
    "3.0": [
      "First release of Trip Parser V3"
    ]
  },
  "servers": [
    {
      "url": "https://test.api.amadeus.com/v3"
    }
  ],
  "paths": {
    "/travel/trip-parser": {
      "post": {
        "tags": [
          "Trip"
        ],
        "summary": "POST Trip Parser request",
        "operationId": "PostTripParserRequest",
        "responses": {
          "200": {
            "description": "Successful Reply",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/trip"
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/warnings"
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                },
                "examples": {
                  "Successful Reply": {
                    "value": {
                      "data": {
                        "trip": {
                          "reference": "JUPDRM",
                          "stakeholders": [
                            {
                              "name": {
                                "firstName": "MIGUEL",
                                "lastName": "TORRES"
                              }
                            }
                          ],
                          "products": [
                            {
                              "air": {
                                "departure": {
                                  "localDateTime": "2021-06-16T08:36:00"
                                },
                                "arrival": {
                                  "localDateTime": "2021-06-17T00:00:00"
                                },
                                "marketing": {
                                  "flightDesignator": {
                                    "carrierCode": "CM",
                                    "flightNumber": "644"
                                  }
                                }
                              }
                            },
                            {
                              "air": {
                                "departure": {
                                  "localDateTime": "2021-06-16T11:21:00"
                                },
                                "arrival": {
                                  "localDateTime": "2021-06-17T00:00:00"
                                },
                                "marketing": {
                                  "flightDesignator": {
                                    "carrierCode": "CM",
                                    "flightNumber": "426"
                                  }
                                }
                              }
                            },
                            {
                              "air": {
                                "departure": {
                                  "localDateTime": "2021-06-20T18:56:00"
                                },
                                "arrival": {
                                  "localDateTime": "2021-06-21T00:00:00"
                                },
                                "marketing": {
                                  "flightDesignator": {
                                    "carrierCode": "CM",
                                    "flightNumber": "645"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request\n\ncode    | title                                 \n------- | ------------------------------------- \n4926    | INVALID DATA RECEIVED                          \n32171   | MANDATORY DATA MISSING ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_400"
                },
                "examples": {
                  "Error 400": {
                    "value": {
                      "errors": [
                        {
                          "status": 400,
                          "code": 4926,
                          "title": "INVALD DATA RECEIVED",
                          "detail": "Wrong file format! Please resend your file in HTML/PDF/EML format"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error\n\ncode    | title                                 \n------- | ------------------------------------- \n141     | SYSTEM ERROR HAS OCCURRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_500"
                },
                "examples": {
                  "Error 500": {
                    "value": {
                      "errors": [
                        {
                          "status": 500,
                          "code": 141,
                          "title": "SYSTEM ERROR HAS OCCURRED"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented\n\ncode    | title                                 \n------- | ------------------------------------- \n141     | UNABLE TO SUPPORT",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error_501"
                },
                "examples": {
                  "Error 501": {
                    "value": {
                      "errors": [
                        {
                          "status": 501,
                          "code": 141,
                          "title": "UNABLE TO SUPPORT"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "DocumentEnvelope",
                "type": "object",
                "x-tags": [
                  "DocumentEnvelope",
                  "blob",
                  "blb",
                  "binary",
                  "document",
                  "compression",
                  "zip",
                  "attachment"
                ],
                "description": "Data model to convey any kind of document, any format with associated meta data to help the identification and the decoding.",
                "properties": {
                  "payload": {
                    "type": "string",
                    "description": "This contains the payload of the document. It can either be raw data or encoded data in b6se4. see details in metaData block."
                  },
                  "metaData": {
                    "title": "DocumentEnvelope_MetaData",
                    "type": "object",
                    "description": "Meta data associated to payload inside document envelope, helping to read/understand the DocumentEnvelope payload.",
                    "properties": {
                      "documentType": {
                        "type": "string",
                        "description": "Type of the document in the payload defined by the \"grammarOwner\"",
                        "example": "pdf, xml, json, jpg"
                      },
                      "name": {
                        "type": "string",
                        "description": "Document name: name of the document in the payload (namespace, see domain)"
                      },
                      "encoding": {
                        "type": "string",
                        "description": "Example: BASE_64",
                        "enum": [
                          "BASE_64",
                          "BASE_64_URL"
                        ]
                      }
                    }
                  }
                }
              },
              "example": {
                "payload": "",
                "metadata": {
                  "documentType": "PDF",
                  "name": "BOOKING_DOCUMENT",
                  "encoding": "BASE_64"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "trip": {
        "title": "trip",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "the resource name"
          },
          "reference": {
            "type": "string",
            "description": "Reference of the Trip",
            "pattern": "[a-f0-9]{6,10}"
          },
          "creationDateTime": {
            "type": "string",
            "description": "Date of the trip point optional time and time offset in ISO 8601 format, e.g. 2017-02-10T20:40:00+02:00"
          },
          "bookingDate": {
            "type": "string",
            "description": "itinerary booking date"
          },
          "bookingNumber": {
            "type": "string",
            "description": "Ticket No(Specially for Air and Train segment)"
          },
          "provider": {
            "type": "string",
            "description": "information of the booking provider",
            "pattern": "[a-zA-Z0-9]{1-35}"
          },
          "title": {
            "type": "string",
            "maxLength": 128,
            "description": "Trip label or name"
          },
          "description": {
            "type": "string",
            "maxLength": 140,
            "description": "Trip description"
          },
          "start": {
            "$ref": "#/components/schemas/start"
          },
          "end": {
            "$ref": "#/components/schemas/end"
          },
          "travelAgency": {
            "$ref": "#/components/schemas/travelAgency"
          },
          "stakeholders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/stakeholder"
            }
          },
          "price": {
            "$ref": "#/components/schemas/price"
          },
          "products": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/air"
                },
                {
                  "$ref": "#/components/schemas/hotel"
                },
                {
                  "$ref": "#/components/schemas/car"
                },
                {
                  "$ref": "#/components/schemas/train"
                }
              ]
            }
          }
        }
      },
      "start": {
        "title": "start",
        "type": "object",
        "description": "Description of a particular point or place in physical space",
        "properties": {
          "localDateTime": {
            "type": "string",
            "description": "Local Date/Time of the itinerary end in format ISO 8601 (YYYY-MM-DDTHH:MM:SS)"
          },
          "name": {
            "type": "string",
            "description": "Label associated to the location (e.g. Eiffel Tower, Madison Square)",
            "example": "Eiffel Tower"
          },
          "iataCode": {
            "type": "string",
            "description": "IATA location code",
            "example": "PAR"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          }
        }
      },
      "address": {
        "title": "address",
        "type": "object",
        "description": "Address information",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of the contact element",
            "example": "BUSINESS , PERSONAL , OTHER"
          },
          "lines": {
            "type": "array",
            "description": "Line 1 \u003d Street address, Line 2 \u003d Apartment, suite, unit, building, floor, etc",
            "items": {
              "type": "string"
            }
          },
          "postalCode": {
            "type": "string",
            "description": "Example: 74130"
          },
          "countryCode": {
            "type": "string",
            "description": "ISO 3166-1 country code",
            "pattern": "[a-zA-Z]{2}"
          },
          "cityName": {
            "type": "string",
            "description": "Full city name. Example: Dublin",
            "pattern": "[a-zA-Z -]{1,35}"
          },
          "stateCode": {
            "type": "string",
            "description": "State code (two character standard IATA state code)",
            "pattern": "[a-zA-Z0-9]{1,2}"
          },
          "postalBox": {
            "type": "string",
            "description": "E.g. BP 220"
          },
          "text": {
            "type": "string",
            "description": "Field containing a full unformatted address. Only applicable when the fields lines, postalCode, countryCode, cityName are not filled."
          },
          "state": {
            "type": "string",
            "description": "State, province or country name",
            "example": "Florida"
          }
        }
      },
      "end": {
        "title": "end",
        "type": "object",
        "description": "Description of a particular point or place in physical space",
        "properties": {
          "localDateTime": {
            "type": "string",
            "description": "Local Date/Time of the itinerary end in format ISO 8601 (YYYY-MM-DDTHH:MM:SS)"
          },
          "name": {
            "type": "string",
            "description": "Label associated to the location (e.g. Eiffel Tower, Madison Square)",
            "example": "Eiffel Tower"
          },
          "iataCode": {
            "type": "string",
            "description": "IATA location code",
            "example": "PAR"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          }
        }
      },
      "travelAgency": {
        "title": "travelAgency",
        "type": "object",
        "description": "details on the travel agency owning the trip",
        "properties": {
          "officeName": {
            "type": "string",
            "description": "Office name of the travel agency"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "phone": {
            "$ref": "#/components/schemas/phone"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          }
        }
      },
      "email": {
        "title": "email",
        "type": "object",
        "description": "Email information.",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of the contact element",
            "enum": [
              "BUSINESS",
              "PERSONAL",
              "OTHER"
            ]
          },
          "address": {
            "type": "string",
            "description": "Email address (e.g. john@smith.com)"
          }
        }
      },
      "phone": {
        "title": "phone",
        "type": "object",
        "description": "Phone information.",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of the contact element",
            "enum": [
              "BUSINESS",
              "PERSONAL",
              "OTHER"
            ]
          },
          "countryCode": {
            "type": "string",
            "description": "Country code of the country (ISO3166-1). E.g. \"US\" for the United States",
            "example": "FR",
            "pattern": "[A-Z]{2}"
          },
          "number": {
            "type": "string",
            "description": "Phone number. Composed of digits only. The number of digits depends on the country.",
            "example": "0336123123",
            "pattern": "{0-9]{1,15}"
          }
        }
      },
      "name": {
        "title": "name",
        "type": "object",
        "description": "Description of the name of a physical person",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name."
          },
          "lastName": {
            "type": "string",
            "description": "Last name."
          },
          "title": {
            "type": "string",
            "description": "Contains all the suffixes and prefixes that can be appended to a name - Mr, Miss, Pr. - E.g. \" Mr\"."
          },
          "middleName": {
            "type": "string",
            "description": "Middle name(s), for example \"Lee\" in \"John Lee Smith\"."
          },
          "prefix": {
            "type": "string",
            "description": "Name prefix (e.g. Doctor)"
          },
          "suffix": {
            "type": "string",
            "description": "Name suffix (e.g. Junior, III, etc)."
          }
        }
      },
      "price": {
        "title": "price",
        "type": "object",
        "description": "Price valuation information",
        "properties": {
          "currency": {
            "type": "string",
            "description": "currency Code apply to all elements of the price"
          },
          "total": {
            "type": "string",
            "description": "Total \u003d base + totalTaxes +"
          },
          "base": {
            "type": "string"
          },
          "totalTaxes": {
            "type": "string"
          }
        }
      },
      "airData": {
        "title": "air",
        "type": "object",
        "description": "",
        "properties": {
          "confirmationNumber": {
            "type": "string"
          },
          "baggages": {
            "$ref": "#/components/schemas/baggages"
          },
          "meal": {
            "$ref": "#/components/schemas/meal"
          },
          "departureAirportLocation": {
            "$ref": "#/components/schemas/departureAirportLocation"
          },
          "arrivalAirportLocation": {
            "$ref": "#/components/schemas/arrivalAirportLocation"
          },
          "departure": {
            "$ref": "#/components/schemas/departureAir"
          },
          "arrival": {
            "$ref": "#/components/schemas/arrivalAir"
          },
          "marketing": {
            "$ref": "#/components/schemas/marketing"
          },
          "operating": {
            "$ref": "#/components/schemas/operating"
          },
          "aircraft": {
            "$ref": "#/components/schemas/aircraft"
          },
          "seats": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/seats"
                },
                {
                  "type": "object",
                  "properties": {
                    "associationRefs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/associationRefs"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "hotelData": {
        "title": "hotel",
        "type": "object",
        "description": "\t\nHotel product",
        "properties": {
          "confirmationNumber": {
            "type": "string",
            "description": "Confirmation number",
            "minLength": 1,
            "maxLength": 20
          },
          "checkInDate": {
            "type": "string",
            "description": "heck-in date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is today date (no dates in the past).",
            "example": " 2020-12-30"
          },
          "checkOutDate": {
            "type": "string",
            "description": "check-out date of the stay (hotel local date). Format YYYY-MM-DD The lowest accepted value is checkInDate+1.",
            "example": "2020-12-31"
          },
          "roomQuantity": {
            "type": "integer",
            "example": "1",
            "minimum": 1,
            "multipleOf": 9,
            "description": "number of rooms (1-9)"
          },
          "contact": {
            "$ref": "#/components/schemas/contactHotel"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "amenities": {
            "type": "array",
            "description": "amenities (list)",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "Hotel Name",
            "example": "Hotel de Paris"
          },
          "description": {
            "$ref": "#/components/schemas/description"
          },
          "policies": {
            "$ref": "#/components/schemas/policies"
          },
          "guests": {
            "$ref": "#/components/schemas/guests"
          },
          "room": {
            "$ref": "#/components/schemas/room"
          }
        }
      },
      "carData": {
        "title": "car",
        "type": "object",
        "description": "Car Product",
        "properties": {
          "confirmationNumber": {
            "type": "string",
            "pattern": "[a-zA-Z0-9]{1-20}",
            "description": "Confirmation number"
          },
          "serviceProviderName": {
            "type": "string",
            "description": "car provider information(Car rental compay name)",
            "maxLength": 70
          },
          "associatedEquipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/associatedEquipments"
            }
          },
          "pickup": {
            "$ref": "#/components/schemas/pickup"
          },
          "dropoff": {
            "$ref": "#/components/schemas/dropoff"
          },
          "driver": {
            "$ref": "#/components/schemas/driver"
          },
          "vehicle": {
            "$ref": "#/components/schemas/carVehicle"
          }
        }
      },
      "trainData": {
        "title": "train",
        "type": "object",
        "description": "Train Product",
        "properties": {
          "confirmNbr": {
            "type": "string",
            "description": "Confirmation number",
            "pattern": "[a-zA-Z0-9]{1-20}"
          },
          "serviceProviderName": {
            "type": "string",
            "description": "Provider name"
          },
          "bookingClass": {
            "type": "string",
            "description": "Booking class",
            "pattern": "[a-zA-Z0-9]{1-2}"
          },
          "departure": {
            "$ref": "#/components/schemas/departure"
          },
          "departureDateTime": {
            "type": "string",
            "description": "Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDTHH:MM:SSZ.",
            "example": "2017-03-02T08:00:00Z"
          },
          "arrivalDateTime": {
            "type": "string",
            "description": "Date in ISO 8601 (http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDTHH:MM:SSZ.",
            "example": "2017-03-02T08:00:00Z"
          },
          "arrival": {
            "$ref": "#/components/schemas/arrival"
          },
          "duration": {
            "type": "string",
            "description": "Duration in ISO 8601 / RFC 3339 (https://www.ietf.org/rfc/rfc3339.txt), P[n]Y[n]M[n]DT[n]H[n]M[n]S.",
            "example": "PT4H7"
          },
          "departureTrack": {
            "type": "string",
            "example": "A"
          },
          "arrivalTrack": {
            "type": "string",
            "example": "20"
          },
          "seats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/seats"
            }
          },
          "vehicle": {
            "$ref": "#/components/schemas/vehicle"
          }
        }
      },
      "stakeholder": {
        "title": "stakeholder",
        "type": "object",
        "description": "Definition of PNR travelers. Fields gender, nationality, placeOfBirth, countryOfResidence are only populated for passengerDelivery resources.",
        "properties": {
          "id": {
            "type": "string",
            "description": "item identifier",
            "example": "ABCDEF-2019-10-05-PT-1"
          },
          "nationality": {
            "type": "string",
            "description": "Nationality of the Stakeholder"
          },
          "passangerTypeCode": {
            "type": "string",
            "description": "3-characters code defining the passenger type - possible values: ADT, CHD, INS, INF, UNA",
            "example": "ADT",
            "maxLength": 3
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The individual\u0027s date of birth.",
            "example": "1978-10-05"
          },
          "age": {
            "type": "integer",
            "description": "Current age of the individual.",
            "example": "40"
          },
          "name": {
            "$ref": "#/components/schemas/name"
          }
        }
      },
      "departure": {
        "title": "departure",
        "type": "object",
        "description": "Description of a particular point or place in physical space",
        "properties": {
          "subType": {
            "type": "string",
            "description": "Location sub-type (e.g. airport, port, rail-station, restaurant, atm...)"
          },
          "name": {
            "type": "string",
            "description": "Label associated to the location (e.g. Eiffel Tower, Madison Square)",
            "example": "Eiffel Tower"
          },
          "iataCode": {
            "type": "string",
            "description": "IATA location code",
            "example": "PAR"
          }
        }
      },
      "arrival": {
        "title": "arrival",
        "type": "object",
        "description": "\t\nDescription of a particular point or place in physical space",
        "properties": {
          "subtype": {
            "type": "string",
            "description": "Location sub-type (e.g. airport, port, rail-station, restaurant, atm...)",
            "example": "Eiffel Tower"
          },
          "name": {
            "type": "string",
            "description": "Label associated to the location (e.g. Eiffel Tower, Madison Square)",
            "example": "Eiffel Tower"
          },
          "iataCode": {
            "type": "string",
            "description": "IATA location code",
            "example": "PAR"
          }
        }
      },
      "seats": {
        "title": "seats",
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Seat number corresponding to the concatenation of the seatmap row and the column information, for example 12B\u0027"
          },
          "cabin": {
            "type": "string",
            "description": "Cabin code associated to the seat"
          }
        },
        "description": ""
      },
      "vehicle": {
        "title": "vehicle",
        "type": "object",
        "description": "Vehicle describes the transportation means e.g. a Train, a Bus, etc. It may be further characterized, in the case of a Train, it contains the Train Number, Code etc.",
        "properties": {
          "vehicleType": {
            "type": "string",
            "description": "Code (codelist TVT) for the generic transport service returned, e.g. High speed, Intercities, Night and so on",
            "example": "005"
          },
          "code": {
            "type": "string",
            "example": "TGD"
          },
          "number": {
            "type": "string",
            "example": "1234"
          },
          "displayName": {
            "type": "string",
            "example": "TGV 1253"
          }
        }
      },
      "associatedEquipments": {
        "title": "associatedEquipments",
        "type": "object",
        "description": "Used to convey information about special equipments (GPS, Baby seat, ...) associated to the car booking.",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "[a-zA-Z]{1-70}",
            "description": "Equipment name"
          }
        }
      },
      "pickup": {
        "title": "pickup",
        "type": "object",
        "description": "\t\nPick-up location and time of the rented vehicle.",
        "properties": {
          "localDateTime": {
            "type": "string",
            "description": "local date and time compliant with ISO8601."
          },
          "location": {
            "$ref": "#/components/schemas/location"
          }
        }
      },
      "location": {
        "title": "location",
        "type": "object",
        "description": "Description of a particular point or place in physical space",
        "properties": {
          "iataCode": {
            "type": "string",
            "description": "IATA location code",
            "example": "PAR"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          }
        }
      },
      "dropoff": {
        "title": "dropoff",
        "type": "object",
        "description": "dropoff location and time of the rented vehicle.",
        "properties": {
          "localDateTime": {
            "type": "string",
            "description": "local date and time compliant with ISO8601."
          },
          "location": {
            "$ref": "#/components/schemas/location"
          }
        }
      },
      "driver": {
        "title": "driver",
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/contact"
            }
          }
        }
      },
      "carVehicle": {
        "title": "carVehicle",
        "type": "object",
        "properties": {
          "acrissCode": {
            "type": "string",
            "description": "Association of car rental industry systems standards",
            "example": "EDMR"
          },
          "carModel": {
            "type": "string",
            "example": " Polo or similar",
            "description": "Car model name"
          },
          "doors": {
            "type": "integer",
            "description": "Number of doors"
          }
        }
      },
      "contact": {
        "title": "contact",
        "type": "object",
        "properties": {
          "phone": {
            "$ref": "#/components/schemas/phone"
          }
        }
      },
      "description": {
        "title": "description",
        "type": "object",
        "description": "\t\nSpecific type to convey a list of string for specific information type ( via qualifier) in specific character set, or language",
        "properties": {
          "text": {
            "type": "string",
            "example": "Do you need and example ?",
            "description": "Free Text"
          }
        }
      },
      "policies": {
        "title": "policies",
        "type": "object",
        "description": "Booking Rules",
        "properties": {
          "cancellation": {
            "$ref": "#/components/schemas/cancellation"
          }
        }
      },
      "cancellation": {
        "title": "cancellation",
        "type": "object",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/description"
          }
        }
      },
      "guests": {
        "title": "guests",
        "type": "object",
        "properties": {
          "adults": {
            "type": "integer",
            "example": "2",
            "minimum": 1,
            "multipleOf": 9,
            "description": "number of adult guests (1-9) per room"
          },
          "childAge": {
            "type": "array",
            "description": "Comma separated list of ages of each child at the time of check-out from the hotel. If several children have the same age, the ages will be repeated.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "room": {
        "title": "room",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Room type code, 3 character identifier of the room. The first character identifies the room type category. The second numeric character identifies the number of beds. The third character identifies the bed type. There is a special case where ROH is returned, this value stands for Run Of House.",
            "pattern": "^[A-Z0-9*]{3}$"
          },
          "typeEstimated": {
            "$ref": "#/components/schemas/typeEstimated"
          }
        }
      },
      "typeEstimated": {
        "title": "typeEstimated",
        "type": "object",
        "description": "\t\nestimated room category, bed type and number of beds in the room. This information has been parsed from the room description, and is thus only provided for informational purposes",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category code"
          },
          "beds": {
            "type": "integer",
            "description": "Number of beds in the room (1-9)"
          },
          "bedType": {
            "type": "string",
            "description": "Type of the bed"
          }
        }
      },
      "baggages": {
        "title": "baggages",
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "Total number of units"
          },
          "weight": {
            "$ref": "#/components/schemas/weight"
          }
        }
      },
      "weight": {
        "title": "weight",
        "type": "object",
        "description": "An object representing weight and unit.",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Defines the weight value with the specified unit with decimal position.",
            "example": "125,5"
          }
        }
      },
      "meal": {
        "title": "meal",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code of the meal served on board"
          },
          "description": {
            "type": "string",
            "description": "Description of the meal served on board",
            "minLength": 1,
            "maxLength": 199
          }
        }
      },
      "departureAirportLocation": {
        "title": "departureAirportLocation",
        "type": "object",
        "description": "Description of a particular point or place in physical space",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label associated to the location (e.g. Eiffel Tower, Madison Square)",
            "example": "Eiffel Tower"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          }
        }
      },
      "arrivalAirportLocation": {
        "title": "arrivalAirportLocation",
        "type": "object",
        "description": "Description of a particular point or place in physical space",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label associated to the location (e.g. Eiffel Tower, Madison Square)",
            "example": "Eiffel Tower"
          },
          "address": {
            "$ref": "#/components/schemas/address"
          }
        }
      },
      "departureAir": {
        "title": "departureAir",
        "type": "object",
        "description": "Departure or arrival information",
        "properties": {
          "iataCode": {
            "type": "string",
            "description": "IATA Airport code",
            "example": "JFK"
          },
          "terminal": {
            "type": "string",
            "description": "Terminal name / number",
            "example": "T2"
          },
          "checkInEndTime": {
            "type": "string"
          },
          "localDateTime": {
            "type": "string",
            "description": "Local schedule dateTime of the departure or arrival. Conversion of dateTime in local date time.",
            "example": "2020-01-13T17:09:00"
          }
        }
      },
      "arrivalAir": {
        "title": "arrivalAir",
        "type": "object",
        "description": "Departure or arrival information",
        "properties": {
          "iataCode": {
            "type": "string",
            "description": "IATA Airport code",
            "example": "JFK"
          },
          "terminal": {
            "type": "string",
            "example": "T2",
            "description": "Terminal name / number"
          },
          "localDateTime": {
            "type": "string",
            "description": "Local schedule dateTime of the departure or arrival. Conversion of dateTime in local date time.",
            "example": "2020-01-13T17:09:00"
          }
        }
      },
      "associationRefs": {
        "title": "associationRefs",
        "description": "",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of related resource"
          },
          "type": {
            "type": "string",
            "description": "Type of related resource"
          }
        }
      },
      "aircraft": {
        "title": "aircraft",
        "type": "object",
        "properties": {
          "aircraftType": {
            "type": "string",
            "description": "aircraft type (ex 320, 777, ...)"
          },
          "aircraftDescription": {
            "type": "string",
            "description": "aircraft description (ex BOEING 737 ALL SERIES PASSENGER)"
          }
        },
        "description": "description of the aircraft equipment"
      },
      "marketing": {
        "title": "marketing",
        "type": "object",
        "properties": {
          "carrier": {
            "$ref": "#/components/schemas/carrier"
          },
          "flightDesignator": {
            "$ref": "#/components/schemas/flightDesignator"
          }
        }
      },
      "carrier": {
        "title": "carrier",
        "type": "object",
        "description": "Includes the common name of the carrier (Operating or Marketing)",
        "properties": {
          "name": {
            "type": "string",
            "description": "Common name of the organization."
          }
        }
      },
      "flightDesignator": {
        "title": "flightDesignator",
        "type": "object",
        "properties": {
          "carrierCode": {
            "type": "string",
            "description": "Two letter IATA standard carrier code",
            "example": "6X"
          },
          "flightNumber": {
            "type": "string",
            "description": "1-4 digit number",
            "example": "333"
          },
          "operationalSuffix": {
            "type": "string",
            "description": "the operational suffix",
            "example": "A"
          }
        }
      },
      "operating": {
        "title": "operating",
        "type": "object",
        "properties": {
          "carrier": {
            "$ref": "#/components/schemas/carrier"
          },
          "flightDesignator": {
            "$ref": "#/components/schemas/flightDesignator"
          }
        }
      },
      "contactHotel": {
        "title": "contactHotel",
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "phome number"
          }
        }
      },
      "air": {
        "title": "air",
        "type": "object",
        "properties": {
          "air": {
            "$ref": "#/components/schemas/airData"
          }
        }
      },
      "hotel": {
        "title": "hotel",
        "type": "object",
        "properties": {
          "hotel": {
            "$ref": "#/components/schemas/hotelData"
          }
        }
      },
      "car": {
        "title": "car",
        "type": "object",
        "properties": {
          "car": {
            "$ref": "#/components/schemas/carData"
          }
        }
      },
      "train": {
        "title": "train",
        "type": "object",
        "properties": {
          "train": {
            "$ref": "#/components/schemas/trainData"
          }
        }
      },
      "warnings": {
        "title": "warnings",
        "type": "object",
        "description": "The Warning Definition",
        "properties": {
          "code": {
            "type": "integer",
            "description": "A machine-readable warning code from the Canned Messages table, that will enable the API Consumers code to handle this type of warning"
          },
          "title": {
            "type": "string",
            "description": "An warning title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized"
          },
          "detail": {
            "type": "string",
            "description": "An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized."
          },
          "source": {
            "type": "object",
            "description": "The Warning Source Definition",
            "properties": {
              "parameter": {
                "type": "string",
                "description": "The key of the URI path or query parameter that caused the warning"
              },
              "pointer": {
                "type": "string",
                "description": "A JSON Pointer RFC6901 to the associated entity in the request body that caused this warning"
              },
              "example": {
                "type": "string",
                "description": "A sample input to guide the user when resolving this issue"
              }
            }
          }
        }
      },
      "issue": {
        "title": "errors",
        "type": "object",
        "description": "The Error Definition",
        "properties": {
          "status": {
            "type": "integer",
            "description": "The HTTP status code of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status."
          },
          "code": {
            "type": "integer",
            "description": "A machine-readable error code from the Amadeus Canned Messages table, that will enable the API Consumers code to handle this type of error"
          },
          "title": {
            "type": "string",
            "description": "An error title from the Canned Messages table with a 1:1 correspondence to the error code. This may be localized"
          },
          "detail": {
            "type": "string",
            "description": "An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this field’s value can be localized."
          },
          "source": {
            "type": "object",
            "properties": {
              "parameter": {
                "type": "string",
                "description": "The key of the URI path or query parameter that caused the error"
              },
              "pointer": {
                "type": "string",
                "description": "A JSON Pointer RFC6901 to the associated entity in the request body that caused this error"
              },
              "example": {
                "type": "string",
                "description": "A sample input to guide the user when resolving this issue"
              }
            }
          }
        }
      },
      "error_400": {
        "title": "error_400",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/issue"
            }
          }
        }
      },
      "error_500": {
        "title": "error_500",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/issue"
            }
          }
        }
      },
      "error_501": {
        "title": "error_501",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/issue"
            }
          }
        }
      }
    }
  }
}